-- Explore DataBase

SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_NAME = 'dim_customers';

SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_NAME = 'dim_products';

SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_NAME = 'fact_sales';

-- Explore All Countries our Customer come from

SELECT DISTINCT country FROM gold.dim_customers;

-- Explore All Category of Products

SELECT DISTINCT category , subcategory,product_name FROM gold.dim_products;

-- Find the Date of The First and Last Oreder
-- How many years of sales 

SELECT 
MIN(order_date) AS Fisrt_Order_Date ,
MAX(order_date) AS Last_Order_Date ,
DATEDIFF(YEAR, MIN(order_date),MAX(order_date)) AS Years_Of_Sales,
DATEDIFF(MONTH, MIN(order_date),MAX(order_date)) AS Order_Range_Months
FROM gold.fact_sales ;

-- Find the youngest and the oldest customer 

SELECT
MIN(birthdate) AS Oldest_Birthdate,
DATEDIFF(YEAR, MIN(birthdate), GETDATE()) AS Oldest_Age,
MAX(birthdate) AS Youngest_Birthdate,
DATEDIFF(YEAR, MAX(birthdate), GETDATE()) AS Youngest_Age
FROM gold.dim_customers;

-- find the total sales

SELECT SUM(sales_amount) as Total_Sales From gold.fact_sales;

-- find how many items are sold

SELECT SUM(quantity) as Total_Quantity From gold.fact_sales;

-- find the AVG selling price 
select avg(price) as AVG_Price from gold.fact_sales ;

-- find the total number of orders
--select count(order_number) as Total_Orders from gold.fact_sales

select count(distinct order_number) as Total_Orders from gold.fact_sales;

-- find the total number of products
select count(product_key) as Total_Products from gold.dim_products;

-- find the total number of customers
select count(customer_key) as Total_Customers from gold.dim_customers;

-- find the total number of customers that has placed an order
select count(distinct customer_key) as Total_Customers from gold.fact_sales ;




-- Generate a Report that show all metrices of the business 
SELECT 'Total_Sales' as Measure_Name , SUM(sales_amount) as Measure_Value From gold.fact_sales
union all 
SELECT 'Total_Quantity' as Measure_Name , SUM(quantity) as Measure_Value From gold.fact_sales
union all
SELECT 'AVG_Price' as Measure_Name , avg(price) as Measure_Value From gold.fact_sales
union all
SELECT 'Total Orders Number ' as Measure_Name , count(distinct order_number) as Measure_Value From gold.fact_sales
union all
SELECT 'Total Products Number ' as Measure_Name , count(product_key) as Measure_Value From gold.dim_products
union all
SELECT 'Total Customers Number ' as Measure_Name , count(distinct customer_key) as Measure_Value From gold.dim_customers



/*
Magnitude Analysis
Purpose:
    - To quantify data and group results by specific dimensions.
    - For understanding data distribution across categories.
*/

-- Find total customers by countries
select count(customer_key) as Total_customers , country
from gold.dim_customers
group by country 
order by Total_customers desc ;

-- Find total customers by gender
select count(customer_key) as Total_customers , gender
from gold.dim_customers
group by gender 
order by Total_customers desc ;

-- Find total products by category
select  category , count(product_key) as Total_Products
from gold.dim_products
group by category 
order by Total_Products desc ;

-- What is the average costs in each category?
select  category , avg(cost) as AVG_Cost
from gold.dim_products
group by category 
order by AVG_Cost desc ;

-- What is the total revenue generated for each category?
select p.category , sum(f.sales_amount) as Total_Revenue
from gold.fact_sales f 
left join gold.dim_products p
on f.product_key = p.product_key 
group by p.category
order by Total_Revenue desc ;

-- What is the total revenue generated by each customer?
select c.customer_key ,c.first_name , c.last_name, sum(f.sales_amount) as Total_Revenue
from gold.fact_sales f 
left join gold.dim_customers c
on f.customer_key = c.customer_key 
group by c.customer_key ,c.first_name , c.last_name
order by Total_Revenue desc ;


-- What is the distribution of sold items across countries?
select c.country , sum(f.quantity) as Total_Sold_Items
from gold.fact_sales f 
left join gold.dim_customers c
on f.customer_key = c.customer_key 
group by c.country
order by Total_Sold_Items desc ;



-- Ranking Analysis
-- Purpose:
    -- To rank items (e.g., products, customers) based on performance or other metrics.
    -- To identify top performers or laggards.


-- Which 5 products Generating the Highest Revenue?
SELECT TOP 5 p.product_name, SUM(f.sales_amount) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY Total_Revenue DESC;


-- Complex but Flexibly Ranking Using Window Functions
SELECT *
FROM (
    SELECT
        p.product_name,
        SUM(f.sales_amount) AS total_revenue,
        RANK() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_products
    FROM gold.fact_sales f
    LEFT JOIN gold.dim_products p
        ON p.product_key = f.product_key
    GROUP BY p.product_name
) AS ranked_products
WHERE rank_products <= 5;


-- What are the 5 worst-performing products in terms of sales?
SELECT TOP 5 p.product_name, SUM(f.sales_amount) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY Total_Revenue asc;


-- Find the top 10 customers who have generated the highest revenue
SELECT TOP 10 c.customer_key, c.first_name, c.last_name, SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY c.customer_key, c.first_name, c.last_name
ORDER BY total_revenue DESC;

-- The 3 customers with the fewest orders placed
SELECT TOP 3 c.customer_key, c.first_name, c.last_name, COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY c.customer_key, c.first_name, c.last_name
ORDER BY total_orders ;


